var _=Object.create,h=Object.defineProperty,L=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty,O=Object.getOwnPropertyNames,z=Object.getOwnPropertyDescriptor;var U=s=>h(s,"__esModule",{value:!0});var I=(s,t)=>{for(var i in t)h(s,i,{get:t[i],enumerable:!0})},V=(s,t,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let e of O(t))!N.call(s,e)&&e!=="default"&&h(s,e,{get:()=>t[e],enumerable:!(i=z(t,e))||i.enumerable});return s},F=s=>V(U(h(s!=null?_(L(s)):{},"default",s&&s.__esModule&&"default"in s?{get:()=>s.default,enumerable:!0}:{value:s,enumerable:!0})),s);U(exports);I(exports,{default:()=>$});var n=F(require("obsidian"));var E=F(require("crypto")),c=new Uint8Array(256),m=c.length;function T(){return m>c.length-16&&(E.default.randomFillSync(c),m=0),c.slice(m,m+=16)}var o=[];for(let s=0;s<256;++s)o.push((s+256).toString(16).slice(1));function M(s,t=0){return o[s[t+0]]+o[s[t+1]]+o[s[t+2]]+o[s[t+3]]+"-"+o[s[t+4]]+o[s[t+5]]+"-"+o[s[t+6]]+o[s[t+7]]+"-"+o[s[t+8]]+o[s[t+9]]+"-"+o[s[t+10]]+o[s[t+11]]+o[s[t+12]]+o[s[t+13]]+o[s[t+14]]+o[s[t+15]]}var k=F(require("crypto")),P={randomUUID:k.default.randomUUID};function Y(s,t,i){if(P.randomUUID&&!t&&!s)return P.randomUUID();s=s||{};let e=s.random||(s.rng||T)();if(e[6]=e[6]&15|64,e[8]=e[8]&63|128,t){i=i||0;for(let a=0;a<16;++a)t[i+a]=e[a];return t}return M(e)}var y=Y;var K={updatedProperty:"lastmod",createdProperty:"date",uuidProperty:"id",slugProperty:"slug",zhihuTagsProperty:"zhihu-tags",momentFormat:"YYYY-MM-DDTHH:mm:ss+08:00",excludedFolders:[],useKeyupEvents:!1,onlyUpdateExisting:!1,timeout:10,excludeField:"exclude_modified_update",appendField:"append_modified_update",appendMaximumFrequency:"day"},v=class extends n.Plugin{constructor(){super(...arguments);this.timer={}}async onload(){await this.loadSettings(),this.settings.useKeyupEvents?this.settings.useKeyupEvents&&this.registerDomEvent(document,"keyup",t=>{if(!t.ctrlKey&&!t.altKey&&!t.metaKey&&/^.$/u.test(t.key))try{t.target.closest(".markdown-source-view .cm-editor")&&this.updateFrontmatter(t.view.app.workspace.activeEditor.file)}catch(i){}}):this.registerEvent(this.app.workspace.on("editor-change",(t,i)=>{i.file instanceof n.TFile&&this.updateFrontmatter(i.file)})),this.addSettingTab(new D(this.app,this)),this.addCommand({id:"tab-copy-url",name:"Tab-Copy for Advanced URL",callback:()=>{console.log("Tab-Copy for Advanced URL");let t=this.app.vault.getName(),i=this.app.workspace.getActiveFile();i&&this.app.fileManager.processFrontMatter(i,e=>{e[this.settings.uuidProperty]=y();var a=e[this.settings.uuidProperty];let p=i.basename;a||(console.log("uuid\u4E0D\u5B58\u5728,\u65B0\u5EFA\u4E00\u4E2A	"),a=y(),e[this.settings.uuidProperty]=a);let g=`obsidian://advanced-uri?vault=${t}&uid=${a}`;console.log(g);let l=`[${p}](${g} )`;navigator.clipboard.writeText(l)})}}),this.addCommand({id:"update-frontmatter",name:"Update Frontmatter",callback:()=>{let t=this.app.workspace.getActiveFile();t&&this.realUpdateFrontmatter(t)}})}async loadSettings(){this.settings=Object.assign({},K,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async realUpdateFrontmatter(t){console.log("realUpdateFrontmatter",t.path);let i=this.app.metadataCache.getFileCache(t);this.settings.onlyUpdateExisting&&!i?.frontmatter?.hasOwnProperty(this.settings.updatedProperty)||i?.frontmatter?.[this.settings.excludeField]||this.settings.excludedFolders.some(e=>t.path.startsWith(e+"/"))||this.app.fileManager.processFrontMatter(t,e=>{let a=(0,n.moment)(),p=e[this.settings.appendField]===!0,g=Infinity,l;if(e[this.settings.updatedProperty]){let r=e[this.settings.updatedProperty];p&&Array.isArray(r)&&(r=r[r.length-1]),l=(0,n.moment)(r,this.settings.momentFormat,!0),l.isValid()&&(g=a.diff(l,"seconds"))}if(g>30){let r=a.format(this.settings.momentFormat);if(p){let d=e[this.settings.updatedProperty]||[];Array.isArray(d)||(d=[d]),d.length&&l&&a.isSame(l,this.settings.appendMaximumFrequency)?d[d.length-1]=r:d.push(r),r=d}console.log("\u51C6\u5907\u66F4\u65B0frontmatter"),console.log(e),e.title=t.basename;let w=e.aliases;console.log(w),w||(e.aliases=[]);let f=this.app.metadataCache.getFileCache(t)?.tags||[];console.log("fileCacheTags: ",f);let u=[];f?(console.log("fileCache\u5B58\u5728,\u66F4\u65B0tags"),u=f):(console.log("fileCache\u4E0D\u5B58\u5728,\u65B0\u5EFAtags"),u=[]),console.log("tags: ",u),e[this.settings.createdProperty]||(e[this.settings.createdProperty]=(0,n.moment)(t.stat.ctime).format(this.settings.momentFormat)),e[this.settings.updatedProperty]=r,e[this.settings.uuidProperty]||(e[this.settings.uuidProperty]=y());let x=e[this.settings.slugProperty];console.log(x),x||(e[this.settings.slugProperty]=e[this.settings.uuidProperty]);let S=e.obsidianLink;console.log(S),S||(e.obsidianLink=`obsidian://advanced-uri?vault=note&uid=${e[this.settings.uuidProperty]}`);let b=e.hugoLink;console.log(b),b||(e.hugoLink=`https://blog.fishyer.com/post/${e[this.settings.uuidProperty]}/`);let A=this.getStringTags(u);console.log("obsidian_tags: ",A),e.tags=A;let C=this.getStringTags(u);console.log("zhihu_tags: ",C),e[this.settings.zhihuTagsProperty]=C}})}async updateFrontmatter(t){console.log("updateFrontmatter",t.path),clearTimeout(this.timer[t.path]),this.timer[t.path]=window.setTimeout(()=>{this.realUpdateFrontmatter(t)},this.settings.timeout*1e3)}getStringTags(t){return t.map(e=>e.tag.replace("#",""))}},$=v,D=class extends n.PluginSettingTab{constructor(t,i){super(t,i);this.plugin=i}display(){let{containerEl:t}=this;t.empty(),new n.Setting(t).setName("Frontmatter property for updated time").setDesc("The name of the YAML/frontmatter property to update").addText(i=>i.setPlaceholder("updated_at").setValue(this.plugin.settings.updatedProperty).onChange(async e=>{this.plugin.settings.updatedProperty=e,await this.plugin.saveSettings()})),new n.Setting(t).setName("Frontmatter property for created time").setDesc("The name of the YAML/frontmatter property to store the created time").addText(i=>i.setPlaceholder("created_at").setValue(this.plugin.settings.createdProperty).onChange(async e=>{this.plugin.settings.createdProperty=e,await this.plugin.saveSettings()})),new n.Setting(t).setName("Frontmatter property for uuid_name").setDesc("The name of the YAML/frontmatter property to store the uuid_name").addText(i=>i.setPlaceholder("uuid_name").setValue(this.plugin.settings.uuidProperty).onChange(async e=>{this.plugin.settings.uuidProperty=e,await this.plugin.saveSettings()})),new n.Setting(t).setName("Frontmatter property for slug_name").setDesc("The name of the YAML/frontmatter property to store the slug_name").addText(i=>i.setPlaceholder("slug_name").setValue(this.plugin.settings.slugProperty).onChange(async e=>{this.plugin.settings.slugProperty=e,await this.plugin.saveSettings()})),new n.Setting(t).setName("Frontmatter property for zhihu-tags").setDesc("The name of the YAML/frontmatter property to store the zhihu-tags").addText(i=>i.setPlaceholder("zhihu-tags").setValue(this.plugin.settings.zhihuTagsProperty).onChange(async e=>{this.plugin.settings.zhihuTagsProperty=e,await this.plugin.saveSettings()})),new n.Setting(t).setName("Date format").setDesc("This is in MomentJS format. Leave blank for the default ATOM format.").addText(i=>i.setPlaceholder("ATOM format").setValue(this.plugin.settings.momentFormat).onChange(async e=>{this.plugin.settings.momentFormat=e,await this.plugin.saveSettings()})),new n.Setting(t).setName("Exclude folders").setDesc("Add a list of folders to exclude, one folder per line. All subfolders will be also excluded.").addTextArea(i=>i.setValue(this.plugin.settings.excludedFolders.join(`
`)).onChange(async e=>{this.plugin.settings.excludedFolders=e.split(`
`).map(a=>a.trim()).filter(a=>!!a),await this.plugin.saveSettings()})),new n.Setting(t).setName("Only update existing fields").setDesc("If you turn this on, it will only update a frontmatter field *if that field already exists*.").addToggle(i=>{i.setValue(this.plugin.settings.onlyUpdateExisting).onChange(async e=>{this.plugin.settings.onlyUpdateExisting=e,await this.plugin.saveSettings()})}),new n.Setting(t).setName("Use typing events instead of Obsidian events").setDesc(`If you make changes to a file using an external editor and Obsidian is currently open, Obsidian
will register this as a modification and update the frontmatter. If you don't want this to happen, and only
want the frontmatter when you are making changes inside Obsidian, you can try this mode. It watches for typing 
events, and then updates the frontmatter only when you type. This means that some events like updating your note 
or properties using your mouse will not cause the modified field to update. You will need to restart Obsidian 
after this change.`).addToggle(i=>{i.setValue(this.plugin.settings.useKeyupEvents).onChange(async e=>{this.plugin.settings.useKeyupEvents=e,await this.plugin.saveSettings()})})}};
